import json
import random
import re
from telebot import TeleBot, types

bot = TeleBot("YOUR_API_TOKEN")



def create_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üåê –í–∏–∑–∏—Ç–∫–∞"),
        types.KeyboardButton("üì® –ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É"),
        types.KeyboardButton("üöÄ –ö–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞"),
        types.KeyboardButton("üé≠ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π JSON")
    )
    return markup

@bot.message_handler(commands=['start'])
def start_command_handler(message: types.Message):
    bot.send_message(
        chat_id=message.chat.id,
        text='–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–≤–æ–π JSON –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –µ–≥–æ –≤ —É–¥–æ–±–Ω—ã–π –¥–ª—è —á—Ç–µ–Ω–∏—è –≤–∏–¥. –û—Ç–ø—Ä–∞–≤—å JSON-—Å—Ç—Ä–æ–∫—É, –∏ —è —Ä–∞–∑–±–µ—Ä—É –µ—ë –¥–ª—è —Ç–µ–±—è. –¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å JSON:',
        reply_markup=create_markup()
    )

@bot.message_handler(content_types=['text'])
def message_handler(message: types.Message):
    text = message.text.strip()
    markup = create_markup()
    
    if text == 'üåê –í–∏–∑–∏—Ç–∫–∞':
        bot.send_message(message.chat.id, '–ù–∞ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ!üõ†üî•', reply_markup=markup)
    elif text == 'üöÄ –ö–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞':
        bot.send_message(message.chat.id, 'https://github.com/BogdanHoriainov/pythone_json_beautifier', reply_markup=markup)
    elif text == 'üì® –ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É':
        bot.send_message(message.chat.id, 'https://t.me/chifuyu_cf', reply_markup=markup)
    elif text == 'üé≠ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π JSON':
        bot.send_message(message.chat.id, f'JSON:\n<code>{generate_random_json()}</code>', reply_markup=markup, parse_mode='HTML')
    else:
        # –∏—Å–ø—Ä–∞–≤–ª—è–µ–º JSON
        fixed_json = fix_json(text)
        if fixed_json:
            bot.send_message(message.chat.id, f'–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π JSON:\n<code>{fixed_json}</code>', reply_markup=markup, parse_mode='HTML')
        else:
            # –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
            try:
                payload = json.loads(text)
                formatted_json = json.dumps(payload, indent=2, sort_keys=True, ensure_ascii=False)
                bot.send_message(message.chat.id, f'JSON:\n<code>{formatted_json}</code>', reply_markup=markup, parse_mode='HTML')
            except json.JSONDecodeError as ex:
                bot.send_message(
                    chat_id=message.chat.id,
                    text=f'–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n<code>{str(ex)}</code>',
                    parse_mode='HTML'
                )

def fix_json(text):
    try:
        text = text.strip()
        if not text.startswith("{"):
            text = "{" + text
        if not text.endswith("}"):
            text += "}"
        payload = json.loads(text)
        return json.dumps(payload, indent=2, ensure_ascii=False)
    except json.JSONDecodeError:
        return None

def generate_random_json():
    return json.dumps({
        "name": random.choice(["Alice", "Ï†ïÎØº", "Charlie", "Cat"]),
        "age": random.randint(18, 40),
        "city": random.choice(["New York", "London", "Seoul", "Tokyo"]),
        "email": f"{random.choice(['alice', 'jeongmin', 'charlie', 'cat'])}@example.com"
    }, indent=2, ensure_ascii=False)

def main():
    bot.infinity_polling()

if __name__ == '__main__':
    main()
